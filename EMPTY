# from tokenParser import *

class ImmutableObject(object):
    
    def __init__(self, value: str|dict=None, sukkel: str=None, arjan: str=None) -> None:
        if (type(value) == dict):
            self.__dict__.update(value)
        else:
            self.value = value
            self.sukkel = sukkel
            self.arjan = arjan

        
def SetAttribute(input: object, attributeName: str, attributeValue: object) -> object:
    attributes = input.__dict__
    if (attributeName in attributes):
        attributeIndex = list(attributes.keys()).index(attributeName)
        first_part = dict(dict(list(attributes.items())[:attributeIndex]), **{attributeName : attributeValue})
        new_attributes = dict(first_part, **dict(list(attributes.items())[attributeIndex+1:]))
        return type(input)(new_attributes)
    else:
        return None
    
    
test = ImmutableObject("Hallo", "ik", "heet Arjan")
new = SetAttribute(test, "arjan", 69)
pass
